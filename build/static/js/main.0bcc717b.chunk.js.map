{"version":3,"sources":["components/select.tsx","App.tsx","components/table.tsx","dictionary.ts","components/button.tsx","components/backdrop.tsx","components/dialog.tsx","components/navbar.tsx","serviceWorker.ts","index.tsx","tableTemplate.ts"],"names":["useStyles","makeStyles","theme","createStyles","formControl","margin","spacing","minWidth","selectEmpty","marginTop","SimpleSelect","props","classes","React","useState","value","setValue","useEffect","liftStateUpFunc","selectID","className","id","labelID","labelText","labelId","onChange","event","target","result","key","menuItems","push","makeMenuItems","App","options","updateOptions","columns","updateColumns","tableRowsData","updateTableRowsData","isOpen","backdropOptions","updateBackdropOptions","modalOptions","updateModalOptions","onSelectChange","prevState","onTableChange","data","generateDocsConfirmed","optionsForServer","JSON","stringify","dataForServer","onSuccess","folderURL","titleText","content","href","confirmBtn","cancelBtn","eval","finalTemplate","concat","basicNoticeFiels","noticeWithDebtOrPaymentFields","basicActFields","basicBV2Fields","basicBFields","basicV2O2Fields","actWithDebtFields","docSubtypeSelectItems","createTableTitle","Dictionary","tableTitle","currentData","length","label","onClick","startIcon","children","color","autoFocus","tableIcons","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","Table","setState","state","editableObj","onRowAdd","newData","Promise","resolve","setTimeout","onRowUpdate","oldData","indexOf","onRowDelete","splice","icons","title","editable","localization","header","actions","body","emptyDataSourceMessage","addTooltip","deleteTooltip","editTooltip","editRow","cancelTooltip","saveTooltip","deleteText","toolbar","searchTooltip","searchPlaceholder","pagination","labelRowsSelect","labelDisplayedRows","firstTooltip","previousTooltip","nextTooltip","lastTooltip","button","SimpleButton","variant","size","backdrop","zIndex","drawer","SimpleBackdrop","open","AlertDialog","useTheme","fullScreen","useMediaQuery","breakpoints","down","aria-labelledby","aria-describedby","display","justifyContent","NavBar","position","Boolean","window","location","hostname","match","onbeforeunload","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","field","type"],"mappings":"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","file":"static/js/main.0bcc717b.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 300,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }),\n);\n\ninterface SelectProps {\n    liftStateUpFunc: (data: any, id: string) => void,\n    menuItems: any,\n    selectID: string,\n    labelID: string,\n    labelText: string,\n}\n\nexport default function SimpleSelect(props: SelectProps) {\n    const classes = useStyles();\n    const [value, setValue] = React.useState('');\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setValue(event.target.value as string);\n        // поднимаем состояние родительскому компоненту\n        props.liftStateUpFunc(event.target.value as string, props.selectID);\n    };\n\n    // сброс данных каждого селекта при размонтировании\n    useEffect(() => {\n        return function cleanup() {\n            props.liftStateUpFunc(null, props.selectID);\n        };\n    }, []); // если не передавать пустой массив, то виснет приложение\n\n    function makeMenuItems() {\n        let result = [];\n        for (let key in props.menuItems) {\n            result.push(<MenuItem value={props.menuItems[key]}>{key}</MenuItem>)\n        }\n        return result;\n    }\n\n    return (\n        <div>\n            <FormControl className={classes.formControl}>\n                <InputLabel id={props.labelID}>{props.labelText}</InputLabel>\n                <Select\n                    labelId={props.labelID}\n                    id={props.selectID}\n                    value={value}\n                    onChange={handleChange}\n                >\n                    <MenuItem value=\"\">\n                        <em>Не выбрано</em>\n                    </MenuItem>\n                    {\n                        makeMenuItems()\n                    }\n                </Select>\n            </FormControl>\n        </div>\n    );\n}","import React, { useEffect } from 'react';\nimport Table from './components/table'\nimport Button from '@material-ui/core/Button';\n\n// мой словарь для опций селектов\nimport Dictionary from './dictionary';\n\n// мои компоненты\nimport SimpleSelect from './components/select'\nimport SimpleButton from './components/button';\nimport SimpleBackdrop from './components/backdrop'\nimport AlertDialog from './components/dialog';\n\n// для модального окна\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n// для backdrop\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n//верхнее меню\nimport NavBar from './components/navbar';\n\n// для кнопки сохранения\nimport SaveIcon from '@material-ui/icons/Save';\n\n// мои шаблоны для полей таблицы\nimport {\n  basicNoticeFiels,\n  noticeWithDebtOrPaymentFields,\n  basicActFields,\n  basicV2O2Fields,\n  basicBFields,\n  actWithDebtFields,\n  basicBV2Fields\n} from './tableTemplate';\n\n// описываем имена опции для селектов и тип хранимых значений\ninterface selectedOptionsObj {\n  \"select-development-project\": string;\n  \"select-doc-subtype\": string;\n  \"select-doc-type\": string;\n}\n\n// интерфейс для опций backdrop\ninterface backdropOptions {\n  isOpen: boolean;\n  message?: string;\n}\n\n// интерфейс для опций модального окна\ninterface modalOptions {\n  isOpen: boolean;\n  message?: string;\n  confirmBtn?: () => void;\n  cancelBtn?: () => void;\n  titleText?: string;\n  content?: any;\n}\n\nexport default function App() {\n\n  // выбранные в селектах опции\n  let [options, updateOptions] = React.useState<any>({});\n  // конфигурация столбцов\n  let [columns, updateColumns] = React.useState<any>([]);\n  // данные из таблицы\n  let [tableRowsData, updateTableRowsData] = React.useState<any>([]);\n  // для backdrop\n  let [backdropOptions, updateBackdropOptions] = React.useState<backdropOptions>({\n    isOpen: false\n  });\n  // для модального окна\n  let [modalOptions, updateModalOptions] = React.useState<modalOptions>({\n    isOpen: false\n  });\n\n\n  // обновляем тут стейт для селектами опций\n  function onSelectChange(value: string, selectID: string) {\n    // при изменении любого селекта должны удаляться все данные таблицы\n    updateTableRowsData(false);\n    //записываем в глобальный state выбранные опции в селектах\n    updateOptions((prevState: any) => {\n      // проверка, меняли ли мы первое поле - тип документа \n      if (selectID === \"select-doc-type\") {\n        return (\n          { \"select-doc-type\": value }\n        );\n      } else { // если изменено не первое поле\n        prevState[selectID] = value;\n        return { ...prevState };\n      }\n\n    });\n\n  }\n\n  // используем эффект для перерисовки полей таблицы\n  useEffect(() => {\n    let finalTemplate: any = [];\n    // поля для уведомления\n    if (options[\"select-doc-type\"] === 'notice') {\n      finalTemplate = finalTemplate.concat(basicNoticeFiels);\n      // проверка подтипа документа \n      if (options[\"select-doc-subtype\"] === 'noticeWithDebt' || options[\"select-doc-subtype\"] === 'noticeWithPayment') {\n        finalTemplate = finalTemplate.concat(noticeWithDebtOrPaymentFields);\n      }\n    };\n    // поля для акта приема-передачи\n    if (options[\"select-doc-type\"] === 'act') {\n      finalTemplate = finalTemplate.concat(basicActFields)\n      // выбор полей для объекта \n      if (options[\"select-development-project\"] === 'B') {\n        finalTemplate = finalTemplate.concat(basicBV2Fields)\n        finalTemplate = finalTemplate.concat(basicBFields)\n      } else {\n        finalTemplate = finalTemplate.concat(basicV2O2Fields)\n      }\n      // выбор полей для подтипа документа\n      if (options[\"select-doc-subtype\"] === 'withDebt') {\n        finalTemplate = finalTemplate.concat(basicBV2Fields)\n        finalTemplate = finalTemplate.concat(actWithDebtFields)\n      }\n    };\n    // обновление состава полей таблицы по собранному шаблону \n    updateColumns(finalTemplate);\n\n  }, [options]);\n\n  // записываем данные, записанные в таблицу\n  function onTableChange(data: any) {\n    updateTableRowsData(data);\n  }\n\n  // отправка данных на сервер для генерации документов\n  function generateDocsConfirmed() {\n    const optionsForServer = JSON.stringify(options);\n    const dataForServer = JSON.stringify(tableRowsData);\n\n\n    // приходится делать такое гуано, потому что компилятор не пропускает выкрутасы с гуглом\n    eval(\"google.script.run.withSuccessHandler(onSuccess).generateDocs(optionsForServer, dataForServer)\")\n    function onSuccess(folderURL: string) {\n      updateModalOptions({\n        isOpen: true,\n        titleText: \"Документы успешно созданы\",\n        content: <><a href={folderURL} target=\"_blank\">Папка с документами</a><p>Очистить таблицу?</p></>,\n        confirmBtn: function () {\n          // удаление введенных в таблицу данных \n          updateTableRowsData(false);\n          // закрывает модальное окно\n          updateModalOptions({\n            isOpen: false,\n          })\n        },\n        cancelBtn: function () {\n          updateModalOptions({ isOpen: false })\n        },\n      });\n      // закрываем backdrop\n      updateBackdropOptions({ isOpen: false });\n    }\n\n  }\n\n  // определение состава опций селекта выбора подтипа документов\n  const docSubtypeSelectItems = () => {\n    if (options[\"select-doc-type\"] === 'notice') {\n      return (\n        {\n          \"Общее\": 'simpleNotice',\n          \"С доплатой\": 'noticeWithDebt',\n          \"С возвратом\": 'noticeWithPayment',\n        }\n      );\n    } else if (options[\"select-doc-type\"] === 'act') {\n      return ({\n        \"С долгом\": 'withDebt',\n        \"Без долга\": 'withoutDebt'\n      });\n    }\n  }\n\n  // функция, которая собирает строку заголовка таблицы\n  const createTableTitle = () => {\n    let result: string = \"\";\n    for (let key in options) {\n      result += \" | \" + (Dictionary[options[key]] as string);\n    }\n    return result;\n  }\n\n\n  return (\n    <>\n      <NavBar />\n      <SimpleSelect\n        labelText=\"Вид документа\"\n        liftStateUpFunc={onSelectChange}\n        menuItems={{\n          \"Акт приема-передачи\": 'act',\n          \"Уведомление\": 'notice',\n        }}\n        selectID=\"select-doc-type\"\n        labelID=\"select-doc-type-label\"\n\n      />\n      {options['select-doc-type'] &&\n        <SimpleSelect\n          labelText=\"Подвид документа\"\n          liftStateUpFunc={onSelectChange}\n          menuItems={docSubtypeSelectItems()}\n          selectID=\"select-doc-subtype\"\n          labelID=\"select-doc-subtype-label\"\n\n        />\n      }\n      {options['select-doc-subtype'] &&\n        options['select-doc-type'] &&\n        <SimpleSelect\n          labelText=\"Объект строительства\"\n          liftStateUpFunc={onSelectChange}\n          menuItems={{\n            \"Виноград 2\": 'V2',\n            \"Оазис 2\": 'O2',\n            \"Баланс\": 'B'\n          }\n          }\n          selectID=\"select-development-project\"\n          labelID=\"select-development-project-label\"\n\n        />\n      }\n      {options['select-development-project'] &&\n        <Table\n          tableTitle={createTableTitle()}\n          liftStateUpFunc={onTableChange}\n          columns={columns}\n          currentData={tableRowsData}\n        />\n      }\n      {options['select-development-project'] &&\n        tableRowsData.length > 0 &&\n        <SimpleButton\n          label=\"Создать документы\"\n          onClick={function () {\n            updateModalOptions({\n              isOpen: true,\n              titleText: \"Подтверждение\",\n              content: \"Сгенерировать документы по данным в таблице?\",\n              confirmBtn: function () {\n                // закрывает модальное окно\n                updateModalOptions({\n                  isOpen: false,\n                })\n                // открывает backdrop\n                updateBackdropOptions({ isOpen: true })\n                // запускает генерацию документов\n                generateDocsConfirmed();\n              },\n              cancelBtn: function () {\n                updateModalOptions({ isOpen: false })\n              },\n            });\n\n          }}\n          startIcon={<SaveIcon />}\n        />\n      }\n      <AlertDialog\n        isOpen={modalOptions.isOpen}\n        children={\n          <>\n            <DialogTitle id=\"alert-dialog-title\">{modalOptions.titleText}</DialogTitle>\n            <DialogContent>\n              <DialogContentText id=\"alert-dialog-description\">\n                {modalOptions.content}\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={modalOptions.cancelBtn} color=\"primary\">\n                Отмена\n          </Button>\n              <Button onClick={modalOptions.confirmBtn} color=\"primary\" autoFocus>\n                Подтвердить\n          </Button>\n            </DialogActions>\n          </>\n        }\n      />\n      {/* крутилочка */}\n      <SimpleBackdrop\n        isOpen={backdropOptions.isOpen}\n        children={<CircularProgress color=\"inherit\" />}\n      />\n    </>\n\n  );\n}\n","import React, { useEffect } from 'react';\nimport MaterialTable, { Column, MTableHeader } from 'material-table';\n\nimport { forwardRef } from 'react';\n\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nimport Button from '@material-ui/core/Button';\nimport { withStyles, withWidth } from '@material-ui/core';\n\nconst tableIcons: any = {\n\tAdd: forwardRef((props: any, ref: any) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props: any, ref: any) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props: any, ref: any) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props: any, ref: any) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props: any, ref: any) => <ChevronRight {...props} ref={ref} />),\n\tEdit: forwardRef((props: any, ref: any) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props: any, ref: any) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props: any, ref: any) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props: any, ref: any) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props: any, ref: any) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props: any, ref: any) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props: any, ref: any) => <ChevronLeft {...props} ref={ref} />),\n\tResetSearch: forwardRef((props: any, ref: any) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props: any, ref: any) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props: any, ref: any) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props: any, ref: any) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props: any, ref: any) => <ViewColumn {...props} ref={ref} />)\n};\n\n\n\n\ninterface TableProps {\n\tliftStateUpFunc: (data: any) => any;\n\tcolumns: any;\n\ttableTitle: string;\n\tcurrentData: any;\n\n}\n\nexport default function Table(props: TableProps) {\n\n\t// интерфейс у нас будет динамическим, так что пока это уберем\n\t/* interface Row {\n\t\tname: string;\n\t\tsurname: string;\n\t\tbirthYear: number;\n\t\tbirthCity: number;\n\t} */\n\n\tinterface TableState {\n\t\tcolumns: Array<Column<any>>;\n\t\tdata: any[];\n\t}\n\n\t// поднимаем состояние до родителя здесь\n\tuseEffect(() => {\n\t\tif (props.currentData === false) {\n\t\t\tsetState({\n\t\t\t\tcolumns: props.columns,\n\t\t\t\tdata: [],\n\t\t\t})\n\t\t};\n\t\tprops.liftStateUpFunc(state.data);\n\t});\n\n\tconst [state, setState] = React.useState<TableState>({\n\t\tcolumns: props.columns,\n\t\tdata: [],\n\t});\n\n\tconst editableObj = {\n\t\tonRowAdd: (newData: any) =>\n\t\t\tnew Promise((resolve) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresolve();\n\t\t\t\t\tsetState((prevState) => {\n\t\t\t\t\t\tconst data = [...prevState.data];\n\t\t\t\t\t\tdata.push(newData);\n\t\t\t\t\t\treturn { ...prevState, data };\n\t\t\t\t\t});\n\t\t\t\t}, 600);\n\t\t\t}),\n\t\tonRowUpdate: (newData: any, oldData: any) =>\n\t\t\tnew Promise((resolve) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresolve();\n\t\t\t\t\tif (oldData) {\n\t\t\t\t\t\tsetState((prevState) => {\n\t\t\t\t\t\t\tconst data = [...prevState.data];\n\t\t\t\t\t\t\tdata[data.indexOf(oldData)] = newData;\n\t\t\t\t\t\t\treturn { ...prevState, data };\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}, 600);\n\t\t\t}),\n\t\tonRowDelete: (oldData: any) =>\n\t\t\tnew Promise((resolve) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresolve();\n\t\t\t\t\tsetState((prevState) => {\n\t\t\t\t\t\tconst data = [...prevState.data];\n\t\t\t\t\t\tdata.splice(data.indexOf(oldData), 1);\n\t\t\t\t\t\treturn { ...prevState, data };\n\t\t\t\t\t});\n\t\t\t\t}, 600);\n\t\t\t}),\n\t};\n\n\treturn (\n\t\t<MaterialTable\n\t\t\ticons={tableIcons}\n\t\t\t/* column={{\n\t\t\t\tcellStyle: {\n\t\t\t\t\tbackgroundColor: '#01579b',\n\t\t\t\t\tcolor: '#FFF'\n\t\t\t\t}\n\t\t\t}} */\n\t\t\ttitle={props.tableTitle}\n\t\t\tcolumns={props.columns}\n\t\t\tdata={props.currentData}\n\t\t\teditable={editableObj}\n\t\t\t/* options={{\n\t\t\t\tfixedColumns: {\n\t\t\t\t\tleft: 1\n\t\t\t\t  }\n\t\t\t}} */\n\t\t\tlocalization={{\n\t\t\t\theader: {\n\t\t\t\t\tactions: 'Действия'\n\t\t\t\t},\n\t\t\t\tbody: {\n\t\t\t\t\temptyDataSourceMessage: 'Тут пока ни одной записи...',\n\t\t\t\t\taddTooltip: 'Добавить документ',\n\t\t\t\t\tdeleteTooltip: 'Удалить документ',\n\t\t\t\t\teditTooltip: 'Редактировать документ',\n\t\t\t\t\teditRow: {\n\t\t\t\t\t\tcancelTooltip: 'Отмена',\n\t\t\t\t\t\tsaveTooltip: 'Подтвердить',\n\t\t\t\t\t\tdeleteText: 'Вы уверены, что хотите удалить строку?',\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttoolbar: {\n\t\t\t\t\tsearchTooltip: 'Поиск',\n\t\t\t\t\tsearchPlaceholder: 'Найти документ'\n\n\t\t\t\t},\n\t\t\t\tpagination: {\n\t\t\t\t\tlabelRowsSelect: 'строк',\n\t\t\t\t\tlabelDisplayedRows: '{count} из {from}-{to}',\n\t\t\t\t\tfirstTooltip: 'Первая страница',\n\t\t\t\t\tpreviousTooltip: 'Предыдущая страница',\n\t\t\t\t\tnextTooltip: 'Следующая страница',\n\t\t\t\t\tlastTooltip: 'Последния страница'\n\t\t\t\t}\n\t\t\t}}\n\t\t/>\n\t);\n}","const Dictionary: any =  {\n     'simpleNotice': \"Уведомление общее\",\n     'noticeWithDebt': \"Уведомление с доплатой\",\n     'noticeWithPayment': \"Уведомление с возвратом\",\n     'withDebt': \"С долгом\",\n     'withoutDebt': \"Без долга\",\n     'act': \"Акт приема-передачи\",\n     'notice': \"Уведомление\",\n     'V2': \"Виноград 2\",\n     'O2': \"Оазис 2\",\n     'B': \"Баланс\",\n}\n\nexport default Dictionary;","import React, { ReactChild } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    button: {\n      margin: theme.spacing(1),\n    },\n  }),\n);\n\ninterface ButtonProps {\n    label: string;\n    onClick: () => void;\n    startIcon?: ReactChild;\n}\n\nexport default function SimpleButton(props: ButtonProps) {\n    const classes = useStyles();\n  \n    return (\n      <div>\n        <Button\n          startIcon={props.startIcon}\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          className={classes.button}\n          onClick={props.onClick}\n        >\n          {props.label}\n        </Button>\n      </div>\n    );\n  }","import React, { ReactChild } from 'react';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        backdrop: {\n            zIndex: theme.zIndex.drawer + 1,\n            color: '#fff',\n        },\n    }),\n);\n\ninterface BackdropProps {\n    isOpen: boolean;\n    children?: ReactChild;\n}\n\nexport default function SimpleBackdrop(props: BackdropProps) {\n    const classes = useStyles();\n    /* const [open, setOpen] = React.useState(false);\n    const handleClose = () => {\n        setOpen(false);\n    }; */\n    /* const handleToggle = () => {\n        setOpen(props.isOpen);\n    }; */\n\n    return (\n        <div>\n            <Backdrop className={classes.backdrop} open={props.isOpen} /* onClick={handleClose} */>\n                {props.children}\n            </Backdrop>\n        </div>\n    );\n}","import React, { ReactChild } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\n\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\n\n\ninterface DialogProps {\n  isOpen: boolean;\n  children?: ReactChild;\n}\n\n\nexport default function AlertDialog(props: DialogProps) {\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  /* const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  }; */\n\n  return (\n    <div>\n      <Dialog\n        fullScreen={fullScreen}\n        open={props.isOpen}\n        /* onClose={handleClose} */\n        /* aria-labelledby=\"alert-dialog-title\" */\n        aria-labelledby=\"responsive-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        {props.children}\n      </Dialog>\n    </div>\n  );\n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        toolbar: {\n            display: \"flex\",\n            justifyContent: \"center\"\n        },\n    }),\n);\n\nexport default function NavBar() {\n    const classes = useStyles();\n\n    return (\n        <div>\n            <AppBar position=\"static\">\n                <Toolbar className={classes.toolbar}>\n                    <Typography variant=\"h6\" >\n                        Генератор документов\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.onbeforeunload = function() {\n  return \"Вы уверены, что хотите покинуть страницу? Введенные данные будут удалены.\";\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const basicNoticeFiels = [\n    {\n        title: 'Дата составления текущего документа',\n        field: 'thisDocDate',\n    },\n    {\n        title: 'ФИО клиента',\n        field: 'clientName',\n    },\n    {\n        title: 'Адрес регистрации клинета',\n        field: 'clientAddress'\n    },\n    {\n        title: 'Дата заключения договора',\n        field: 'docDate'\n    },\n    {\n        title: 'Номер договора',\n        field: 'docNumber'\n    },\n    {\n        title: 'Номер корпуса',\n        field: 'literNumber', type: 'numeric'\n    },\n    {\n        title: 'Номер квартиры',\n        field: 'flatNumber', type: 'numeric'\n    },\n    {\n        title: 'Дата выдачи разрешения на ввод',\n        field: 'statePermitDate'\n    },\n    {\n        title: 'Идентификатор разрешения на ввод',\n        field: 'statePermitID'\n    },\n];\nconst noticeWithDebtOrPaymentFields = [\n    {\n        title: 'Сумма возврата/доплаты числом',\n        field: 'paymentByNumber'\n    },\n    {\n        title: 'Сумма возврата/доплаты текстом',\n        field: 'paymentByText'\n    },\n    {\n        title: 'Проектная площадь',\n        field: 'areaByProject'\n    },\n    {\n        title: 'Фактическая площадь',\n        field: 'areaActual'\n    },\n    {\n        title: 'Стомость 1 кв. м. по договору',\n        field: 'legalOneSquareMeterCost'\n    }\n];\nconst basicActFields: any = [\n    {\n        title: 'ФИО клиента',\n        field: 'clientName',\n        /* cellStyle: {width: 200} */\n    },\n    {\n        title: 'Дата рождения',\n        field: 'birthDate'\n    },\n    {\n        title: 'Пол клиента',\n        field: 'sex'\n    },\n    {\n        title: 'Место рождения',\n        field: 'birthPlace'\n    },\n    {\n        title: 'Серия и/или номер паспорта',\n        field: 'passportNumber'\n    },\n    {\n        title: 'Кем выдан паспорт',\n        field: 'passportIssuedBy'\n    },\n    {\n        title: 'Дата выдачи паспорта',\n        field: 'passportIssueDate'\n    },\n    {\n        title: 'Код подразделения',\n        field: 'passportOfficeCode'\n    },\n    {\n        title: 'Адрес регистрации клинета',\n        field: 'clientAddress'\n    },\n    {\n        title: 'Вариант принятия в собственность объекта',\n        field: 'wayOfTakingOwnership'\n    },\n    {\n        title: 'Номер корпуса',\n        field: 'literNumber', type: 'numeric'\n    },\n    {\n        title: 'Номер квартиры',\n        field: 'flatNumber', type: 'numeric'\n    },\n    {\n        title: 'Этаж',\n        field: 'floorNumber', type: 'numeric'\n    },\n    {\n        title: 'Количество комнат',\n        field: 'roomsNumber', type: 'numeric'\n    }, // здесь возможно потребуются изменения для студий\n    {\n        title: 'Номер договора',\n        field: 'docNumber'\n    },\n    {\n        title: 'Дата заключения договора',\n        field: 'docDate'\n    },\n    {\n        title: 'ФИО сокращенно',\n        field: 'shortClientName'\n    },\n];\n\nconst basicV2O2Fields = [\n    {\n        title: 'Площадь (без лет. пом.) по договору',\n        field: 'flatAreaUnderContract', /* type: 'numeric' */\n    },\n    {\n        title: 'Площадь (без лет. пом.) по инвентаризации',\n        field: 'flatAreaUnderInventory', /* type: 'numeric' */\n    },\n    {\n        title: 'Площадь (с пониж. коэфф.) по договору',\n        field: 'flatAreaWithBalconiesUnderContract', /* type: 'numeric' */\n    },\n    {\n        title: 'Площадь (с пониж. коэфф.) по инвентаризации',\n        field: 'flatAreaWithBalconiesUnderInventory', /* type: 'numeric' */\n    },\n];\nconst basicBV2Fields = [\n    {\n        title: 'Номер подъезда',\n        field: 'entranceNumber', type: 'numeric'\n    },\n];\nconst basicBFields = [\n    {\n        title: 'Номер телефона клиента',\n        field: 'clientPhone'\n    },\n    {\n        title: 'Проектная площадь квартиры по договору',\n        field: 'totalAreaUnderContract', type: 'numeric'\n    },\n    {\n        title: 'Проектная площадь квартиры по инвентаризации',\n        field: 'totalAreaUnderInventory', type: 'numeric'\n    },\n];\nconst actWithDebtFields = [\n    {\n        title: 'Сумма задолженности в рублях',\n        field: 'customerDebtByNumber'\n    },\n    {\n        title: 'Сумма задолженности текстом',\n        field: 'customerDebtByText'\n    },\n];\n\nexport {\n    basicNoticeFiels,\n    noticeWithDebtOrPaymentFields,\n    basicActFields,\n    basicV2O2Fields,\n    basicBFields,\n    actWithDebtFields,\n    basicBV2Fields\n};"],"sourceRoot":""}